name: Deploy SQL Scripts

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4.1.1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4.0.1
        with:
          role-to-assume: ${{ vars.AWS_DEPLOY_ROLE }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Get secrets from AWS Secrets Manager
        uses: aws-actions/aws-secretsmanager-get-secrets@v2.0.1
        with:
          secret-ids: | 
            SM, ${{ vars.AWS_SECRET_NAME_API }}
            SMDB, ${{ vars.AWS_SECRET_NAME_DB }}
          parse-json-secrets: true

      - name: Fetch Parameter from AWS Parameter Store
        run: |
            {
              echo 'EC2_SSH_PRIVATE_KEY<<EOF'
              aws ssm get-parameter --name '${{ env.SM_KEYID }}' --with-decryption --query 'Parameter.Value' --output text
              echo EOF
            } >> "$GITHUB_ENV"

      - name: Copy over SQL scripts & changelog
        uses: appleboy/scp-action@master
        with:
          host: ${{ env.SM_INSTANCEIP }}
          username: "ubuntu"
          key: ${{ env.EC2_SSH_PRIVATE_KEY}}
          port: 22
          source: "sql/*.sql,changelog.yaml"
          target: "~/"

      - name: Deploy Liquibase Scripts
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SM_INSTANCEIP }}
          username: "ubuntu"
          key: ${{ env.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            rm -f *.properties
            echo "changeLogFile: changelog.yaml" >> liquibase.properties
            echo "url:jdbc:postgresql://${{ env.SMDB_HOST }}:${{ env.SMDB_PORT }}/postgres" >> liquibase.properties
            echo "username:${{ env.SMDB_USERNAME }}" >> liquibase.properties
            echo "password:${{ env.SMDB_PASSWORD }}" >> liquibase.properties
            liquibase update

